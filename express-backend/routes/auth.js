// auth route will be controlled by express router
// 1. Middleware to bCrypt credentials (password)
// 2. Middleware Function : Login route : implement business logic for validating user creds, retrieving them from db & returning access token to frontend
// 3. Middleware Function : Register route : implement business logic for registering user & inserting user in db

// importing express, bcrypt & jsonwebtoken libraries
const express = require("express");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");

// importing User model
const User = require("../models/User");

// instantiating new router
const router = express.Router();

// constants defined for use in this middleware function
const saltRounds = 10;
// privateKey used by bcrypt to hash the user-entered password
const privateKey = "";

// function executes on every inbound request : hash pw, take hashed value generated by bcrypt, store it on the request in 'hashedPassword' property
router.use(function (req, res, next) {
  bcrypt.genSalt(saltRounds, function (err, salt) {
    bcrypt.hash(req.body.password, salt, function (err, hash) {
      req.hashedPassword = hash;
      next(); // passes execution to next piece of middleware
    });
  });
});

// invoked for post request for login : responsible for login
router.post("/login", async function (req, res, next) {
  // check if request body contains username & pw properties
  console.warn(req.body);
  if (req.body.username && req.body.password) {
    //query user model to find one with username
    const user = await User.findOne()
      .where("username")
      .equals(req.body.username)
      .exec();
    if (user) {
      return bcrypt
        .compare(req.body.password, user.password) // compare entered pw against stored db pw
        .then((result) => {
          // entered pw == stored db pw
          if (result === true) {
            // generate JWT Token
            const token = jwt.sign({ id: user._id }, privateKey, {
              algorithm: "RS256",
            });
            return res.status(200).json({ access_token: token }); // return jwt token
          }
          // entered pw did not match stored db pw
          else {
            return res.status(401).json({ error: "Invalid credentials." }); // return 401 error with message
          }
        })
        .catch((error) => {
          return res.status(500).json({ error: error.message });
        });
    }
    // username not valid, return 401 error
    return res.status(401).json({ error: "Invalid credentials." });
  }
  // else request body didn't contain both username & pw : return 400 error
  else {
    res.status(400).json({ error: "Username or Password Missing" });
  }
});

// invoked for post request for register: responsible for register
router.post("/register", async function (req, res, next) {
  // check if request body contains username & pw & pw confirmation properties
  if (req.body.username && req.body.password && req.body.passwordConfirmation) {
    // pw == pw confirmation : create new user from user model
    if (req.body.password === req.body.passwordConfirmation) {
      const user = new User({
        username: req.body.username, // store entered username
        password: req.hashedPassword, // store hashed pw
      });
      return await user
        .save() // save user to db
        .then((savedUser) => {
          return res.status(201).json({
            id: savedUser._id,
            username: savedUser.username,
          });
        })
        .catch((error) => {
          return res.status(500).json({ error: "Something went wrong." });
        });
    }
    // pw does not match pw confirmation : return error 400
    res.status(400).json({ error: "Passwords not matching" });
  }
  // else request body didn't contain both username & pw & pw confirmation: return 400 error
  else {
    res.status(400).json({ error: "Username or Password Missing" });
  }
});

//Export
module.exports = router;
